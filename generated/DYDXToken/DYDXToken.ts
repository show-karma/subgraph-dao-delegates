// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegatee(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get delegationType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class DelegatedPowerChanged extends ethereum.Event {
  get params(): DelegatedPowerChanged__Params {
    return new DelegatedPowerChanged__Params(this);
  }
}

export class DelegatedPowerChanged__Params {
  _event: DelegatedPowerChanged;

  constructor(event: DelegatedPowerChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get delegationType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferAllowlistUpdated extends ethereum.Event {
  get params(): TransferAllowlistUpdated__Params {
    return new TransferAllowlistUpdated__Params(this);
  }
}

export class TransferAllowlistUpdated__Params {
  _event: TransferAllowlistUpdated;

  constructor(event: TransferAllowlistUpdated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isAllowed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class TransfersRestrictedBeforeUpdated extends ethereum.Event {
  get params(): TransfersRestrictedBeforeUpdated__Params {
    return new TransfersRestrictedBeforeUpdated__Params(this);
  }
}

export class TransfersRestrictedBeforeUpdated__Params {
  _event: TransfersRestrictedBeforeUpdated;

  constructor(event: TransfersRestrictedBeforeUpdated) {
    this._event = event;
  }

  get transfersRestrictedBefore(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DYDXToken___propositionPowerSnapshotsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DYDXToken___totalSupplySnapshotsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DYDXToken___votingSnapshotsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DYDXToken extends ethereum.SmartContract {
  static bind(address: Address): DYDXToken {
    return new DYDXToken("DYDXToken", address);
  }

  DELEGATE_BY_TYPE_TYPEHASH(): Bytes {
    let result = super.call(
      "DELEGATE_BY_TYPE_TYPEHASH",
      "DELEGATE_BY_TYPE_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DELEGATE_BY_TYPE_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DELEGATE_BY_TYPE_TYPEHASH",
      "DELEGATE_BY_TYPE_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DELEGATE_TYPEHASH(): Bytes {
    let result = super.call(
      "DELEGATE_TYPEHASH",
      "DELEGATE_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DELEGATE_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DELEGATE_TYPEHASH",
      "DELEGATE_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EIP712_DOMAIN(): Bytes {
    let result = super.call("EIP712_DOMAIN", "EIP712_DOMAIN():(bytes32)", []);

    return result[0].toBytes();
  }

  try_EIP712_DOMAIN(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EIP712_DOMAIN",
      "EIP712_DOMAIN():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EIP712_VERSION(): Bytes {
    let result = super.call("EIP712_VERSION", "EIP712_VERSION():(bytes)", []);

    return result[0].toBytes();
  }

  try_EIP712_VERSION(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EIP712_VERSION",
      "EIP712_VERSION():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  INITIAL_SUPPLY(): BigInt {
    let result = super.call("INITIAL_SUPPLY", "INITIAL_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_INITIAL_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "INITIAL_SUPPLY",
      "INITIAL_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINT_MAX_PERCENT(): BigInt {
    let result = super.call(
      "MINT_MAX_PERCENT",
      "MINT_MAX_PERCENT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINT_MAX_PERCENT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINT_MAX_PERCENT",
      "MINT_MAX_PERCENT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINT_MIN_INTERVAL(): BigInt {
    let result = super.call(
      "MINT_MIN_INTERVAL",
      "MINT_MIN_INTERVAL():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINT_MIN_INTERVAL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINT_MIN_INTERVAL",
      "MINT_MIN_INTERVAL():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN(): BigInt {
    let result = super.call(
      "TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN",
      "TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN",
      "TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _mintingRestrictedBefore(): BigInt {
    let result = super.call(
      "_mintingRestrictedBefore",
      "_mintingRestrictedBefore():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__mintingRestrictedBefore(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_mintingRestrictedBefore",
      "_mintingRestrictedBefore():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _propositionPowerDelegates(param0: Address): Address {
    let result = super.call(
      "_propositionPowerDelegates",
      "_propositionPowerDelegates(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try__propositionPowerDelegates(
    param0: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_propositionPowerDelegates",
      "_propositionPowerDelegates(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _propositionPowerSnapshots(
    param0: Address,
    param1: BigInt
  ): DYDXToken___propositionPowerSnapshotsResult {
    let result = super.call(
      "_propositionPowerSnapshots",
      "_propositionPowerSnapshots(address,uint256):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new DYDXToken___propositionPowerSnapshotsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try__propositionPowerSnapshots(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<DYDXToken___propositionPowerSnapshotsResult> {
    let result = super.tryCall(
      "_propositionPowerSnapshots",
      "_propositionPowerSnapshots(address,uint256):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DYDXToken___propositionPowerSnapshotsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  _propositionPowerSnapshotsCounts(param0: Address): BigInt {
    let result = super.call(
      "_propositionPowerSnapshotsCounts",
      "_propositionPowerSnapshotsCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try__propositionPowerSnapshotsCounts(
    param0: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_propositionPowerSnapshotsCounts",
      "_propositionPowerSnapshotsCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _tokenTransferAllowlist(param0: Address): boolean {
    let result = super.call(
      "_tokenTransferAllowlist",
      "_tokenTransferAllowlist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try__tokenTransferAllowlist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_tokenTransferAllowlist",
      "_tokenTransferAllowlist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _totalSupplySnapshots(
    param0: BigInt
  ): DYDXToken___totalSupplySnapshotsResult {
    let result = super.call(
      "_totalSupplySnapshots",
      "_totalSupplySnapshots(uint256):(uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new DYDXToken___totalSupplySnapshotsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try__totalSupplySnapshots(
    param0: BigInt
  ): ethereum.CallResult<DYDXToken___totalSupplySnapshotsResult> {
    let result = super.tryCall(
      "_totalSupplySnapshots",
      "_totalSupplySnapshots(uint256):(uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DYDXToken___totalSupplySnapshotsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  _totalSupplySnapshotsCount(): BigInt {
    let result = super.call(
      "_totalSupplySnapshotsCount",
      "_totalSupplySnapshotsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__totalSupplySnapshotsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_totalSupplySnapshotsCount",
      "_totalSupplySnapshotsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _transfersRestrictedBefore(): BigInt {
    let result = super.call(
      "_transfersRestrictedBefore",
      "_transfersRestrictedBefore():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__transfersRestrictedBefore(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_transfersRestrictedBefore",
      "_transfersRestrictedBefore():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _votingDelegates(param0: Address): Address {
    let result = super.call(
      "_votingDelegates",
      "_votingDelegates(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try__votingDelegates(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_votingDelegates",
      "_votingDelegates(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _votingSnapshots(
    param0: Address,
    param1: BigInt
  ): DYDXToken___votingSnapshotsResult {
    let result = super.call(
      "_votingSnapshots",
      "_votingSnapshots(address,uint256):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new DYDXToken___votingSnapshotsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try__votingSnapshots(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<DYDXToken___votingSnapshotsResult> {
    let result = super.tryCall(
      "_votingSnapshots",
      "_votingSnapshots(address,uint256):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DYDXToken___votingSnapshotsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  _votingSnapshotsCounts(param0: Address): BigInt {
    let result = super.call(
      "_votingSnapshotsCounts",
      "_votingSnapshotsCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try__votingSnapshotsCounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_votingSnapshotsCounts",
      "_votingSnapshotsCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getDelegateeByType(delegator: Address, delegationType: i32): Address {
    let result = super.call(
      "getDelegateeByType",
      "getDelegateeByType(address,uint8):(address)",
      [
        ethereum.Value.fromAddress(delegator),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType))
      ]
    );

    return result[0].toAddress();
  }

  try_getDelegateeByType(
    delegator: Address,
    delegationType: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDelegateeByType",
      "getDelegateeByType(address,uint8):(address)",
      [
        ethereum.Value.fromAddress(delegator),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPowerAtBlock(
    user: Address,
    blockNumber: BigInt,
    delegationType: i32
  ): BigInt {
    let result = super.call(
      "getPowerAtBlock",
      "getPowerAtBlock(address,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType))
      ]
    );

    return result[0].toBigInt();
  }

  try_getPowerAtBlock(
    user: Address,
    blockNumber: BigInt,
    delegationType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPowerAtBlock",
      "getPowerAtBlock(address,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPowerCurrent(user: Address, delegationType: i32): BigInt {
    let result = super.call(
      "getPowerCurrent",
      "getPowerCurrent(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType))
      ]
    );

    return result[0].toBigInt();
  }

  try_getPowerCurrent(
    user: Address,
    delegationType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPowerCurrent",
      "getPowerCurrent(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get distributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get transfersRestrictedBefore(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get transferRestrictionLiftedNoLaterThan(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mintingRestrictedBefore(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get mintMaxPercent(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddToTokenTransferAllowlistCall extends ethereum.Call {
  get inputs(): AddToTokenTransferAllowlistCall__Inputs {
    return new AddToTokenTransferAllowlistCall__Inputs(this);
  }

  get outputs(): AddToTokenTransferAllowlistCall__Outputs {
    return new AddToTokenTransferAllowlistCall__Outputs(this);
  }
}

export class AddToTokenTransferAllowlistCall__Inputs {
  _call: AddToTokenTransferAllowlistCall;

  constructor(call: AddToTokenTransferAllowlistCall) {
    this._call = call;
  }

  get addressesToAdd(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddToTokenTransferAllowlistCall__Outputs {
  _call: AddToTokenTransferAllowlistCall;

  constructor(call: AddToTokenTransferAllowlistCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}

export class DelegateByTypeCall extends ethereum.Call {
  get inputs(): DelegateByTypeCall__Inputs {
    return new DelegateByTypeCall__Inputs(this);
  }

  get outputs(): DelegateByTypeCall__Outputs {
    return new DelegateByTypeCall__Outputs(this);
  }
}

export class DelegateByTypeCall__Inputs {
  _call: DelegateByTypeCall;

  constructor(call: DelegateByTypeCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delegationType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class DelegateByTypeCall__Outputs {
  _call: DelegateByTypeCall;

  constructor(call: DelegateByTypeCall) {
    this._call = call;
  }
}

export class DelegateByTypeBySigCall extends ethereum.Call {
  get inputs(): DelegateByTypeBySigCall__Inputs {
    return new DelegateByTypeBySigCall__Inputs(this);
  }

  get outputs(): DelegateByTypeBySigCall__Outputs {
    return new DelegateByTypeBySigCall__Outputs(this);
  }
}

export class DelegateByTypeBySigCall__Inputs {
  _call: DelegateByTypeBySigCall;

  constructor(call: DelegateByTypeBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delegationType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class DelegateByTypeBySigCall__Outputs {
  _call: DelegateByTypeBySigCall;

  constructor(call: DelegateByTypeBySigCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RemoveFromTokenTransferAllowlistCall extends ethereum.Call {
  get inputs(): RemoveFromTokenTransferAllowlistCall__Inputs {
    return new RemoveFromTokenTransferAllowlistCall__Inputs(this);
  }

  get outputs(): RemoveFromTokenTransferAllowlistCall__Outputs {
    return new RemoveFromTokenTransferAllowlistCall__Outputs(this);
  }
}

export class RemoveFromTokenTransferAllowlistCall__Inputs {
  _call: RemoveFromTokenTransferAllowlistCall;

  constructor(call: RemoveFromTokenTransferAllowlistCall) {
    this._call = call;
  }

  get addressesToRemove(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveFromTokenTransferAllowlistCall__Outputs {
  _call: RemoveFromTokenTransferAllowlistCall;

  constructor(call: RemoveFromTokenTransferAllowlistCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateTransfersRestrictedBeforeCall extends ethereum.Call {
  get inputs(): UpdateTransfersRestrictedBeforeCall__Inputs {
    return new UpdateTransfersRestrictedBeforeCall__Inputs(this);
  }

  get outputs(): UpdateTransfersRestrictedBeforeCall__Outputs {
    return new UpdateTransfersRestrictedBeforeCall__Outputs(this);
  }
}

export class UpdateTransfersRestrictedBeforeCall__Inputs {
  _call: UpdateTransfersRestrictedBeforeCall;

  constructor(call: UpdateTransfersRestrictedBeforeCall) {
    this._call = call;
  }

  get transfersRestrictedBefore(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateTransfersRestrictedBeforeCall__Outputs {
  _call: UpdateTransfersRestrictedBeforeCall;

  constructor(call: UpdateTransfersRestrictedBeforeCall) {
    this._call = call;
  }
}
