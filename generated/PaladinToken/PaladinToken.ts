// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimRewards extends ethereum.Event {
  get params(): ClaimRewards__Params {
    return new ClaimRewards__Params(this);
  }
}

export class ClaimRewards__Params {
  _event: ClaimRewards;

  constructor(event: ClaimRewards) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Cooldown extends ethereum.Event {
  get params(): Cooldown__Params {
    return new Cooldown__Params(this);
  }
}

export class Cooldown__Params {
  _event: Cooldown;

  constructor(event: Cooldown) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EmergencyUnstake extends ethereum.Event {
  get params(): EmergencyUnstake__Params {
    return new EmergencyUnstake__Params(this);
  }
}

export class EmergencyUnstake__Params {
  _event: EmergencyUnstake;

  constructor(event: EmergencyUnstake) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Kick extends ethereum.Event {
  get params(): Kick__Params {
    return new Kick__Params(this);
  }
}

export class Kick__Params {
  _event: Kick;

  constructor(event: Kick) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get kicker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get penalty(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalLocked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Lock extends ethereum.Event {
  get params(): Lock__Params {
    return new Lock__Params(this);
  }
}

export class Lock__Params {
  _event: Lock;

  constructor(event: Lock) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get startTimestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalLocked(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewPendingOwner extends ethereum.Event {
  get params(): NewPendingOwner__Params {
    return new NewPendingOwner__Params(this);
  }
}

export class NewPendingOwner__Params {
  _event: NewPendingOwner;

  constructor(event: NewPendingOwner) {
    this._event = event;
  }

  get previousPendingOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPendingOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Stake extends ethereum.Event {
  get params(): Stake__Params {
    return new Stake__Params(this);
  }
}

export class Stake__Params {
  _event: Stake;

  constructor(event: Stake) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unlock extends ethereum.Event {
  get params(): Unlock__Params {
    return new Unlock__Params(this);
  }
}

export class Unlock__Params {
  _event: Unlock;

  constructor(event: Unlock) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get totalLocked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unstake extends ethereum.Event {
  get params(): Unstake__Params {
    return new Unstake__Params(this);
  }
}

export class Unstake__Params {
  _event: Unstake;

  constructor(event: Unstake) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaladinToken__allBalancesOfResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getStaked(): BigInt {
    return this.value0;
  }

  getLocked(): BigInt {
    return this.value1;
  }

  getAvailable(): BigInt {
    return this.value2;
  }
}

export class PaladinToken__checkpointsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getFromBlock(): BigInt {
    return this.value0;
  }

  getVotes(): BigInt {
    return this.value1;
  }
}

export class PaladinToken__delegateCheckpointsResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getFromBlock(): BigInt {
    return this.value0;
  }

  getDelegate(): Address {
    return this.value1;
  }
}

export class PaladinToken__getCurrentTotalLockResultValue0Struct extends ethereum.Tuple {
  get total(): BigInt {
    return this[0].toBigInt();
  }

  get fromBlock(): BigInt {
    return this[1].toBigInt();
  }
}

export class PaladinToken__getPastTotalLockResultValue0Struct extends ethereum.Tuple {
  get total(): BigInt {
    return this[0].toBigInt();
  }

  get fromBlock(): BigInt {
    return this[1].toBigInt();
  }
}

export class PaladinToken__getUserLockResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get duration(): BigInt {
    return this[2].toBigInt();
  }

  get fromBlock(): BigInt {
    return this[3].toBigInt();
  }
}

export class PaladinToken__getUserPastLockResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get startTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get duration(): BigInt {
    return this[2].toBigInt();
  }

  get fromBlock(): BigInt {
    return this[3].toBigInt();
  }
}

export class PaladinToken__globalRewardsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getIndex(): BigInt {
    return this.value0;
  }

  getLastUpdate(): BigInt {
    return this.value1;
  }
}

export class PaladinToken__totalLocksResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getTotal(): BigInt {
    return this.value0;
  }

  getFromBlock(): BigInt {
    return this.value1;
  }
}

export class PaladinToken__userLocksResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getStartTimestamp(): BigInt {
    return this.value1;
  }

  getDuration(): BigInt {
    return this.value2;
  }

  getFromBlock(): BigInt {
    return this.value3;
  }
}

export class PaladinToken__userRewardStatesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getIndex(): BigInt {
    return this.value0;
  }

  getLastUpdate(): BigInt {
    return this.value1;
  }
}

export class PaladinToken extends ethereum.SmartContract {
  static bind(address: Address): PaladinToken {
    return new PaladinToken("PaladinToken", address);
  }

  COOLDOWN_PERIOD(): BigInt {
    let result = super.call(
      "COOLDOWN_PERIOD",
      "COOLDOWN_PERIOD():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_COOLDOWN_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "COOLDOWN_PERIOD",
      "COOLDOWN_PERIOD():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BPS(): BigInt {
    let result = super.call("MAX_BPS", "MAX_BPS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_BPS", "MAX_BPS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_LOCK_DURATION(): BigInt {
    let result = super.call(
      "MAX_LOCK_DURATION",
      "MAX_LOCK_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_LOCK_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_LOCK_DURATION",
      "MAX_LOCK_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_LOCK_DURATION(): BigInt {
    let result = super.call(
      "MIN_LOCK_DURATION",
      "MIN_LOCK_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_LOCK_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_LOCK_DURATION",
      "MIN_LOCK_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MONTH(): BigInt {
    let result = super.call("MONTH", "MONTH():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MONTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MONTH", "MONTH():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ONE_YEAR(): BigInt {
    let result = super.call("ONE_YEAR", "ONE_YEAR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE_YEAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ONE_YEAR", "ONE_YEAR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UNIT(): BigInt {
    let result = super.call("UNIT", "UNIT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_UNIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("UNIT", "UNIT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UNLOCK_DELAY(): BigInt {
    let result = super.call("UNLOCK_DELAY", "UNLOCK_DELAY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_UNLOCK_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("UNLOCK_DELAY", "UNLOCK_DELAY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UNSTAKE_PERIOD(): BigInt {
    let result = super.call("UNSTAKE_PERIOD", "UNSTAKE_PERIOD():(uint256)", []);

    return result[0].toBigInt();
  }

  try_UNSTAKE_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "UNSTAKE_PERIOD",
      "UNSTAKE_PERIOD():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WEEK(): BigInt {
    let result = super.call("WEEK", "WEEK():(uint256)", []);

    return result[0].toBigInt();
  }

  try_WEEK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("WEEK", "WEEK():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allBalancesOf(user: Address): PaladinToken__allBalancesOfResult {
    let result = super.call(
      "allBalancesOf",
      "allBalancesOf(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return new PaladinToken__allBalancesOfResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_allBalancesOf(
    user: Address,
  ): ethereum.CallResult<PaladinToken__allBalancesOfResult> {
    let result = super.tryCall(
      "allBalancesOf",
      "allBalancesOf(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaladinToken__allBalancesOfResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  availableBalanceOf(user: Address): BigInt {
    let result = super.call(
      "availableBalanceOf",
      "availableBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_availableBalanceOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableBalanceOf",
      "availableBalanceOf(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseLockBonusRatio(): BigInt {
    let result = super.call(
      "baseLockBonusRatio",
      "baseLockBonusRatio():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_baseLockBonusRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "baseLockBonusRatio",
      "baseLockBonusRatio():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bonusLockVoteRatio(): BigInt {
    let result = super.call(
      "bonusLockVoteRatio",
      "bonusLockVoteRatio():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_bonusLockVoteRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bonusLockVoteRatio",
      "bonusLockVoteRatio():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkpoints(
    param0: Address,
    param1: BigInt,
  ): PaladinToken__checkpointsResult {
    let result = super.call(
      "checkpoints",
      "checkpoints(address,uint256):(uint32,uint224)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new PaladinToken__checkpointsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_checkpoints(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<PaladinToken__checkpointsResult> {
    let result = super.tryCall(
      "checkpoints",
      "checkpoints(address,uint256):(uint32,uint224)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaladinToken__checkpointsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  claimableRewards(param0: Address): BigInt {
    let result = super.call(
      "claimableRewards",
      "claimableRewards(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_claimableRewards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableRewards",
      "claimableRewards(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cooldowns(param0: Address): BigInt {
    let result = super.call("cooldowns", "cooldowns(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_cooldowns(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cooldowns", "cooldowns(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentDropPerSecond(): BigInt {
    let result = super.call(
      "currentDropPerSecond",
      "currentDropPerSecond():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_currentDropPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentDropPerSecond",
      "currentDropPerSecond():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentTotalLocked(): BigInt {
    let result = super.call(
      "currentTotalLocked",
      "currentTotalLocked():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_currentTotalLocked(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentTotalLocked",
      "currentTotalLocked():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  delegateCheckpoints(
    param0: Address,
    param1: BigInt,
  ): PaladinToken__delegateCheckpointsResult {
    let result = super.call(
      "delegateCheckpoints",
      "delegateCheckpoints(address,uint256):(uint32,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new PaladinToken__delegateCheckpointsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
    );
  }

  try_delegateCheckpoints(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<PaladinToken__delegateCheckpointsResult> {
    let result = super.tryCall(
      "delegateCheckpoints",
      "delegateCheckpoints(address,uint256):(uint32,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaladinToken__delegateCheckpointsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
      ),
    );
  }

  delegates(param0: Address): Address {
    let result = super.call("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toAddress();
  }

  try_delegates(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dropDecreaseDuration(): BigInt {
    let result = super.call(
      "dropDecreaseDuration",
      "dropDecreaseDuration():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_dropDecreaseDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dropDecreaseDuration",
      "dropDecreaseDuration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emergency(): boolean {
    let result = super.call("emergency", "emergency():(bool)", []);

    return result[0].toBoolean();
  }

  try_emergency(): ethereum.CallResult<boolean> {
    let result = super.tryCall("emergency", "emergency():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  emergencyWithdraw(amount: BigInt, receiver: Address): BigInt {
    let result = super.call(
      "emergencyWithdraw",
      "emergencyWithdraw(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(receiver),
      ],
    );

    return result[0].toBigInt();
  }

  try_emergencyWithdraw(
    amount: BigInt,
    receiver: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "emergencyWithdraw",
      "emergencyWithdraw(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  endDropPerSecond(): BigInt {
    let result = super.call(
      "endDropPerSecond",
      "endDropPerSecond():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_endDropPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "endDropPerSecond",
      "endDropPerSecond():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateClaimableRewards(user: Address): BigInt {
    let result = super.call(
      "estimateClaimableRewards",
      "estimateClaimableRewards(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_estimateClaimableRewards(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateClaimableRewards",
      "estimateClaimableRewards(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  futureSmartWalletChecker(): Address {
    let result = super.call(
      "futureSmartWalletChecker",
      "futureSmartWalletChecker():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_futureSmartWalletChecker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "futureSmartWalletChecker",
      "futureSmartWalletChecker():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentTotalLock(): PaladinToken__getCurrentTotalLockResultValue0Struct {
    let result = super.call(
      "getCurrentTotalLock",
      "getCurrentTotalLock():((uint224,uint32))",
      [],
    );

    return changetype<PaladinToken__getCurrentTotalLockResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getCurrentTotalLock(): ethereum.CallResult<PaladinToken__getCurrentTotalLockResultValue0Struct> {
    let result = super.tryCall(
      "getCurrentTotalLock",
      "getCurrentTotalLock():((uint224,uint32))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PaladinToken__getCurrentTotalLockResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getCurrentVotes(user: Address): BigInt {
    let result = super.call(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_getCurrentVotes(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentVotes",
      "getCurrentVotes(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNewReceiverCooldown(
    sender: Address,
    receiver: Address,
    amount: BigInt,
  ): BigInt {
    let result = super.call(
      "getNewReceiverCooldown",
      "getNewReceiverCooldown(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBigInt();
  }

  try_getNewReceiverCooldown(
    sender: Address,
    receiver: Address,
    amount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNewReceiverCooldown",
      "getNewReceiverCooldown(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPastDelegate(account: Address, blockNumber: BigInt): Address {
    let result = super.call(
      "getPastDelegate",
      "getPastDelegate(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
      ],
    );

    return result[0].toAddress();
  }

  try_getPastDelegate(
    account: Address,
    blockNumber: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPastDelegate",
      "getPastDelegate(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPastTotalLock(
    blockNumber: BigInt,
  ): PaladinToken__getPastTotalLockResultValue0Struct {
    let result = super.call(
      "getPastTotalLock",
      "getPastTotalLock(uint256):((uint224,uint32))",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)],
    );

    return changetype<PaladinToken__getPastTotalLockResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getPastTotalLock(
    blockNumber: BigInt,
  ): ethereum.CallResult<PaladinToken__getPastTotalLockResultValue0Struct> {
    let result = super.tryCall(
      "getPastTotalLock",
      "getPastTotalLock(uint256):((uint224,uint32))",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PaladinToken__getPastTotalLockResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getPastVotes(user: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPastVotes",
      "getPastVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
      ],
    );

    return result[0].toBigInt();
  }

  try_getPastVotes(
    user: Address,
    blockNumber: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastVotes",
      "getPastVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalLockLength(): BigInt {
    let result = super.call(
      "getTotalLockLength",
      "getTotalLockLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getTotalLockLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalLockLength",
      "getTotalLockLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserLock(user: Address): PaladinToken__getUserLockResultValue0Struct {
    let result = super.call(
      "getUserLock",
      "getUserLock(address):((uint128,uint48,uint48,uint32))",
      [ethereum.Value.fromAddress(user)],
    );

    return changetype<PaladinToken__getUserLockResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getUserLock(
    user: Address,
  ): ethereum.CallResult<PaladinToken__getUserLockResultValue0Struct> {
    let result = super.tryCall(
      "getUserLock",
      "getUserLock(address):((uint128,uint48,uint48,uint32))",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PaladinToken__getUserLockResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getUserLockCount(user: Address): BigInt {
    let result = super.call(
      "getUserLockCount",
      "getUserLockCount(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_getUserLockCount(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserLockCount",
      "getUserLockCount(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserPastLock(
    user: Address,
    blockNumber: BigInt,
  ): PaladinToken__getUserPastLockResultValue0Struct {
    let result = super.call(
      "getUserPastLock",
      "getUserPastLock(address,uint256):((uint128,uint48,uint48,uint32))",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
      ],
    );

    return changetype<PaladinToken__getUserPastLockResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getUserPastLock(
    user: Address,
    blockNumber: BigInt,
  ): ethereum.CallResult<PaladinToken__getUserPastLockResultValue0Struct> {
    let result = super.tryCall(
      "getUserPastLock",
      "getUserPastLock(address,uint256):((uint128,uint48,uint48,uint32))",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PaladinToken__getUserPastLockResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  globalRewards(): PaladinToken__globalRewardsResult {
    let result = super.call(
      "globalRewards",
      "globalRewards():(uint128,uint128)",
      [],
    );

    return new PaladinToken__globalRewardsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_globalRewards(): ethereum.CallResult<PaladinToken__globalRewardsResult> {
    let result = super.tryCall(
      "globalRewards",
      "globalRewards():(uint128,uint128)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaladinToken__globalRewardsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kickRatioPerWeek(): BigInt {
    let result = super.call(
      "kickRatioPerWeek",
      "kickRatioPerWeek():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_kickRatioPerWeek(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "kickRatioPerWeek",
      "kickRatioPerWeek():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastDropUpdate(): BigInt {
    let result = super.call("lastDropUpdate", "lastDropUpdate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastDropUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastDropUpdate",
      "lastDropUpdate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRewardUpdate(): BigInt {
    let result = super.call(
      "lastRewardUpdate",
      "lastRewardUpdate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastRewardUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardUpdate",
      "lastRewardUpdate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLockBonusRatio(): BigInt {
    let result = super.call(
      "maxLockBonusRatio",
      "maxLockBonusRatio():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxLockBonusRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxLockBonusRatio",
      "maxLockBonusRatio():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minLockBonusRatio(): BigInt {
    let result = super.call(
      "minLockBonusRatio",
      "minLockBonusRatio():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minLockBonusRatio(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minLockBonusRatio",
      "minLockBonusRatio():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numCheckpoints(account: Address): BigInt {
    let result = super.call(
      "numCheckpoints",
      "numCheckpoints(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBigInt();
  }

  try_numCheckpoints(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numCheckpoints",
      "numCheckpoints(address):(uint256)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pal(): Address {
    let result = super.call("pal", "pal():(address)", []);

    return result[0].toAddress();
  }

  try_pal(): ethereum.CallResult<Address> {
    let result = super.tryCall("pal", "pal():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardIndex(): BigInt {
    let result = super.call("rewardIndex", "rewardIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardIndex", "rewardIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsLastUpdate(user: Address): BigInt {
    let result = super.call(
      "rewardsLastUpdate",
      "rewardsLastUpdate(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_rewardsLastUpdate(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsLastUpdate",
      "rewardsLastUpdate(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsVault(): Address {
    let result = super.call("rewardsVault", "rewardsVault():(address)", []);

    return result[0].toAddress();
  }

  try_rewardsVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardsVault", "rewardsVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  smartWalletChecker(): Address {
    let result = super.call(
      "smartWalletChecker",
      "smartWalletChecker():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_smartWalletChecker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "smartWalletChecker",
      "smartWalletChecker():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stake(amount: BigInt): BigInt {
    let result = super.call("stake", "stake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBigInt();
  }

  try_stake(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stake", "stake(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeAndIncreaseLock(amount: BigInt, duration: BigInt): BigInt {
    let result = super.call(
      "stakeAndIncreaseLock",
      "stakeAndIncreaseLock(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(duration),
      ],
    );

    return result[0].toBigInt();
  }

  try_stakeAndIncreaseLock(
    amount: BigInt,
    duration: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeAndIncreaseLock",
      "stakeAndIncreaseLock(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(duration),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeAndLock(amount: BigInt, duration: BigInt): BigInt {
    let result = super.call(
      "stakeAndLock",
      "stakeAndLock(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(duration),
      ],
    );

    return result[0].toBigInt();
  }

  try_stakeAndLock(
    amount: BigInt,
    duration: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeAndLock",
      "stakeAndLock(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(duration),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startDropPerSecond(): BigInt {
    let result = super.call(
      "startDropPerSecond",
      "startDropPerSecond():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_startDropPerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startDropPerSecond",
      "startDropPerSecond():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  startDropTimestamp(): BigInt {
    let result = super.call(
      "startDropTimestamp",
      "startDropTimestamp():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_startDropTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startDropTimestamp",
      "startDropTimestamp():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalLocks(param0: BigInt): PaladinToken__totalLocksResult {
    let result = super.call(
      "totalLocks",
      "totalLocks(uint256):(uint224,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new PaladinToken__totalLocksResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_totalLocks(
    param0: BigInt,
  ): ethereum.CallResult<PaladinToken__totalLocksResult> {
    let result = super.tryCall(
      "totalLocks",
      "totalLocks(uint256):(uint224,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaladinToken__totalLocksResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unstake(amount: BigInt, receiver: Address): BigInt {
    let result = super.call("unstake", "unstake(uint256,address):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromAddress(receiver),
    ]);

    return result[0].toBigInt();
  }

  try_unstake(amount: BigInt, receiver: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstake",
      "unstake(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userBonusRatioDecrease(param0: Address): BigInt {
    let result = super.call(
      "userBonusRatioDecrease",
      "userBonusRatioDecrease(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_userBonusRatioDecrease(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBonusRatioDecrease",
      "userBonusRatioDecrease(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userCurrentBonusRatio(param0: Address): BigInt {
    let result = super.call(
      "userCurrentBonusRatio",
      "userCurrentBonusRatio(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_userCurrentBonusRatio(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userCurrentBonusRatio",
      "userCurrentBonusRatio(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userLocks(param0: Address, param1: BigInt): PaladinToken__userLocksResult {
    let result = super.call(
      "userLocks",
      "userLocks(address,uint256):(uint128,uint48,uint48,uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new PaladinToken__userLocksResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
    );
  }

  try_userLocks(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<PaladinToken__userLocksResult> {
    let result = super.tryCall(
      "userLocks",
      "userLocks(address,uint256):(uint128,uint48,uint48,uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaladinToken__userLocksResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
      ),
    );
  }

  userRewardIndex(user: Address): BigInt {
    let result = super.call(
      "userRewardIndex",
      "userRewardIndex(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigInt();
  }

  try_userRewardIndex(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userRewardIndex",
      "userRewardIndex(address):(uint256)",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userRewardStates(param0: Address): PaladinToken__userRewardStatesResult {
    let result = super.call(
      "userRewardStates",
      "userRewardStates(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new PaladinToken__userRewardStatesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_userRewardStates(
    param0: Address,
  ): ethereum.CallResult<PaladinToken__userRewardStatesResult> {
    let result = super.tryCall(
      "userRewardStates",
      "userRewardStates(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PaladinToken__userRewardStatesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _palToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _admin(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewardsVault(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _smartWalletChecker(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _startDropPerSecond(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _endDropPerSecond(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _dropDecreaseDuration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _baseLockBonusRatio(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _minLockBonusRatio(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _maxLockBonusRatio(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class ApplySmartWalletCheckerCall extends ethereum.Call {
  get inputs(): ApplySmartWalletCheckerCall__Inputs {
    return new ApplySmartWalletCheckerCall__Inputs(this);
  }

  get outputs(): ApplySmartWalletCheckerCall__Outputs {
    return new ApplySmartWalletCheckerCall__Outputs(this);
  }
}

export class ApplySmartWalletCheckerCall__Inputs {
  _call: ApplySmartWalletCheckerCall;

  constructor(call: ApplySmartWalletCheckerCall) {
    this._call = call;
  }
}

export class ApplySmartWalletCheckerCall__Outputs {
  _call: ApplySmartWalletCheckerCall;

  constructor(call: ApplySmartWalletCheckerCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class CommitSmartWalletCheckerCall extends ethereum.Call {
  get inputs(): CommitSmartWalletCheckerCall__Inputs {
    return new CommitSmartWalletCheckerCall__Inputs(this);
  }

  get outputs(): CommitSmartWalletCheckerCall__Outputs {
    return new CommitSmartWalletCheckerCall__Outputs(this);
  }
}

export class CommitSmartWalletCheckerCall__Inputs {
  _call: CommitSmartWalletCheckerCall;

  constructor(call: CommitSmartWalletCheckerCall) {
    this._call = call;
  }

  get newSmartWalletChecker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CommitSmartWalletCheckerCall__Outputs {
  _call: CommitSmartWalletCheckerCall;

  constructor(call: CommitSmartWalletCheckerCall) {
    this._call = call;
  }
}

export class CooldownCall extends ethereum.Call {
  get inputs(): CooldownCall__Inputs {
    return new CooldownCall__Inputs(this);
  }

  get outputs(): CooldownCall__Outputs {
    return new CooldownCall__Outputs(this);
  }
}

export class CooldownCall__Inputs {
  _call: CooldownCall;

  constructor(call: CooldownCall) {
    this._call = call;
  }
}

export class CooldownCall__Outputs {
  _call: CooldownCall;

  constructor(call: CooldownCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseLockCall extends ethereum.Call {
  get inputs(): IncreaseLockCall__Inputs {
    return new IncreaseLockCall__Inputs(this);
  }

  get outputs(): IncreaseLockCall__Outputs {
    return new IncreaseLockCall__Outputs(this);
  }
}

export class IncreaseLockCall__Inputs {
  _call: IncreaseLockCall;

  constructor(call: IncreaseLockCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IncreaseLockCall__Outputs {
  _call: IncreaseLockCall;

  constructor(call: IncreaseLockCall) {
    this._call = call;
  }
}

export class IncreaseLockDurationCall extends ethereum.Call {
  get inputs(): IncreaseLockDurationCall__Inputs {
    return new IncreaseLockDurationCall__Inputs(this);
  }

  get outputs(): IncreaseLockDurationCall__Outputs {
    return new IncreaseLockDurationCall__Outputs(this);
  }
}

export class IncreaseLockDurationCall__Inputs {
  _call: IncreaseLockDurationCall;

  constructor(call: IncreaseLockDurationCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IncreaseLockDurationCall__Outputs {
  _call: IncreaseLockDurationCall;

  constructor(call: IncreaseLockDurationCall) {
    this._call = call;
  }
}

export class KickCall extends ethereum.Call {
  get inputs(): KickCall__Inputs {
    return new KickCall__Inputs(this);
  }

  get outputs(): KickCall__Outputs {
    return new KickCall__Outputs(this);
  }
}

export class KickCall__Inputs {
  _call: KickCall;

  constructor(call: KickCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class KickCall__Outputs {
  _call: KickCall;

  constructor(call: KickCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetEndDropPerSecondCall extends ethereum.Call {
  get inputs(): SetEndDropPerSecondCall__Inputs {
    return new SetEndDropPerSecondCall__Inputs(this);
  }

  get outputs(): SetEndDropPerSecondCall__Outputs {
    return new SetEndDropPerSecondCall__Outputs(this);
  }
}

export class SetEndDropPerSecondCall__Inputs {
  _call: SetEndDropPerSecondCall;

  constructor(call: SetEndDropPerSecondCall) {
    this._call = call;
  }

  get newEndDropPerSecond(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetEndDropPerSecondCall__Outputs {
  _call: SetEndDropPerSecondCall;

  constructor(call: SetEndDropPerSecondCall) {
    this._call = call;
  }
}

export class SetKickRatioCall extends ethereum.Call {
  get inputs(): SetKickRatioCall__Inputs {
    return new SetKickRatioCall__Inputs(this);
  }

  get outputs(): SetKickRatioCall__Outputs {
    return new SetKickRatioCall__Outputs(this);
  }
}

export class SetKickRatioCall__Inputs {
  _call: SetKickRatioCall;

  constructor(call: SetKickRatioCall) {
    this._call = call;
  }

  get newKickRatioPerWeek(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetKickRatioCall__Outputs {
  _call: SetKickRatioCall;

  constructor(call: SetKickRatioCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class StakeAndIncreaseLockCall extends ethereum.Call {
  get inputs(): StakeAndIncreaseLockCall__Inputs {
    return new StakeAndIncreaseLockCall__Inputs(this);
  }

  get outputs(): StakeAndIncreaseLockCall__Outputs {
    return new StakeAndIncreaseLockCall__Outputs(this);
  }
}

export class StakeAndIncreaseLockCall__Inputs {
  _call: StakeAndIncreaseLockCall;

  constructor(call: StakeAndIncreaseLockCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeAndIncreaseLockCall__Outputs {
  _call: StakeAndIncreaseLockCall;

  constructor(call: StakeAndIncreaseLockCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class StakeAndLockCall extends ethereum.Call {
  get inputs(): StakeAndLockCall__Inputs {
    return new StakeAndLockCall__Inputs(this);
  }

  get outputs(): StakeAndLockCall__Outputs {
    return new StakeAndLockCall__Outputs(this);
  }
}

export class StakeAndLockCall__Inputs {
  _call: StakeAndLockCall;

  constructor(call: StakeAndLockCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeAndLockCall__Outputs {
  _call: StakeAndLockCall;

  constructor(call: StakeAndLockCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TriggerEmergencyWithdrawCall extends ethereum.Call {
  get inputs(): TriggerEmergencyWithdrawCall__Inputs {
    return new TriggerEmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): TriggerEmergencyWithdrawCall__Outputs {
    return new TriggerEmergencyWithdrawCall__Outputs(this);
  }
}

export class TriggerEmergencyWithdrawCall__Inputs {
  _call: TriggerEmergencyWithdrawCall;

  constructor(call: TriggerEmergencyWithdrawCall) {
    this._call = call;
  }

  get trigger(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class TriggerEmergencyWithdrawCall__Outputs {
  _call: TriggerEmergencyWithdrawCall;

  constructor(call: TriggerEmergencyWithdrawCall) {
    this._call = call;
  }
}

export class UnlockCall extends ethereum.Call {
  get inputs(): UnlockCall__Inputs {
    return new UnlockCall__Inputs(this);
  }

  get outputs(): UnlockCall__Outputs {
    return new UnlockCall__Outputs(this);
  }
}

export class UnlockCall__Inputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnlockCall__Outputs {
  _call: UnlockCall;

  constructor(call: UnlockCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateRewardStateCall extends ethereum.Call {
  get inputs(): UpdateRewardStateCall__Inputs {
    return new UpdateRewardStateCall__Inputs(this);
  }

  get outputs(): UpdateRewardStateCall__Outputs {
    return new UpdateRewardStateCall__Outputs(this);
  }
}

export class UpdateRewardStateCall__Inputs {
  _call: UpdateRewardStateCall;

  constructor(call: UpdateRewardStateCall) {
    this._call = call;
  }
}

export class UpdateRewardStateCall__Outputs {
  _call: UpdateRewardStateCall;

  constructor(call: UpdateRewardStateCall) {
    this._call = call;
  }
}

export class UpdateUserRewardStateCall extends ethereum.Call {
  get inputs(): UpdateUserRewardStateCall__Inputs {
    return new UpdateUserRewardStateCall__Inputs(this);
  }

  get outputs(): UpdateUserRewardStateCall__Outputs {
    return new UpdateUserRewardStateCall__Outputs(this);
  }
}

export class UpdateUserRewardStateCall__Inputs {
  _call: UpdateUserRewardStateCall;

  constructor(call: UpdateUserRewardStateCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateUserRewardStateCall__Outputs {
  _call: UpdateUserRewardStateCall;

  constructor(call: UpdateUserRewardStateCall) {
    this._call = call;
  }
}
