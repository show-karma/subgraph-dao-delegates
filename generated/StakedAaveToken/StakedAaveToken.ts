// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssetConfigUpdated extends ethereum.Event {
  get params(): AssetConfigUpdated__Params {
    return new AssetConfigUpdated__Params(this);
  }
}

export class AssetConfigUpdated__Params {
  _event: AssetConfigUpdated;

  constructor(event: AssetConfigUpdated) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get emission(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AssetIndexUpdated extends ethereum.Event {
  get params(): AssetIndexUpdated__Params {
    return new AssetIndexUpdated__Params(this);
  }
}

export class AssetIndexUpdated__Params {
  _event: AssetIndexUpdated;

  constructor(event: AssetIndexUpdated) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Cooldown extends ethereum.Event {
  get params(): Cooldown__Params {
    return new Cooldown__Params(this);
  }
}

export class Cooldown__Params {
  _event: Cooldown;

  constructor(event: Cooldown) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegatee(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get delegationType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class DelegatedPowerChanged extends ethereum.Event {
  get params(): DelegatedPowerChanged__Params {
    return new DelegatedPowerChanged__Params(this);
  }
}

export class DelegatedPowerChanged__Params {
  _event: DelegatedPowerChanged;

  constructor(event: DelegatedPowerChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get delegationType(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Redeem extends ethereum.Event {
  get params(): Redeem__Params {
    return new Redeem__Params(this);
  }
}

export class Redeem__Params {
  _event: Redeem;

  constructor(event: Redeem) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardsAccrued extends ethereum.Event {
  get params(): RewardsAccrued__Params {
    return new RewardsAccrued__Params(this);
  }
}

export class RewardsAccrued__Params {
  _event: RewardsAccrued;

  constructor(event: RewardsAccrued) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get onBehalfOf(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokensRescued extends ethereum.Event {
  get params(): TokensRescued__Params {
    return new TokensRescued__Params(this);
  }
}

export class TokensRescued__Params {
  _event: TokensRescued;

  constructor(event: TokensRescued) {
    this._event = event;
  }

  get tokenRescued(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get aaveMerkleDistributor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountRescued(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UserIndexUpdated extends ethereum.Event {
  get params(): UserIndexUpdated__Params {
    return new UserIndexUpdated__Params(this);
  }
}

export class UserIndexUpdated__Params {
  _event: UserIndexUpdated;

  constructor(event: UserIndexUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakedAaveToken___votingSnapshotsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getBlockNumber(): BigInt {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class StakedAaveToken__assetsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getEmissionPerSecond(): BigInt {
    return this.value0;
  }

  getLastUpdateTimestamp(): BigInt {
    return this.value1;
  }

  getIndex(): BigInt {
    return this.value2;
  }
}

export class StakedAaveToken extends ethereum.SmartContract {
  static bind(address: Address): StakedAaveToken {
    return new StakedAaveToken("StakedAaveToken", address);
  }

  COOLDOWN_SECONDS(): BigInt {
    let result = super.call(
      "COOLDOWN_SECONDS",
      "COOLDOWN_SECONDS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_COOLDOWN_SECONDS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "COOLDOWN_SECONDS",
      "COOLDOWN_SECONDS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DELEGATE_BY_TYPE_TYPEHASH(): Bytes {
    let result = super.call(
      "DELEGATE_BY_TYPE_TYPEHASH",
      "DELEGATE_BY_TYPE_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DELEGATE_BY_TYPE_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DELEGATE_BY_TYPE_TYPEHASH",
      "DELEGATE_BY_TYPE_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DELEGATE_TYPEHASH(): Bytes {
    let result = super.call(
      "DELEGATE_TYPEHASH",
      "DELEGATE_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DELEGATE_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DELEGATE_TYPEHASH",
      "DELEGATE_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DISTRIBUTION_END(): BigInt {
    let result = super.call(
      "DISTRIBUTION_END",
      "DISTRIBUTION_END():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_DISTRIBUTION_END(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DISTRIBUTION_END",
      "DISTRIBUTION_END():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EIP712_REVISION(): Bytes {
    let result = super.call("EIP712_REVISION", "EIP712_REVISION():(bytes)", []);

    return result[0].toBytes();
  }

  try_EIP712_REVISION(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EIP712_REVISION",
      "EIP712_REVISION():(bytes)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EMISSION_MANAGER(): Address {
    let result = super.call(
      "EMISSION_MANAGER",
      "EMISSION_MANAGER():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_EMISSION_MANAGER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "EMISSION_MANAGER",
      "EMISSION_MANAGER():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PRECISION(): i32 {
    let result = super.call("PRECISION", "PRECISION():(uint8)", []);

    return result[0].toI32();
  }

  try_PRECISION(): ethereum.CallResult<i32> {
    let result = super.tryCall("PRECISION", "PRECISION():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  REVISION(): BigInt {
    let result = super.call("REVISION", "REVISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_REVISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("REVISION", "REVISION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARDS_VAULT(): Address {
    let result = super.call("REWARDS_VAULT", "REWARDS_VAULT():(address)", []);

    return result[0].toAddress();
  }

  try_REWARDS_VAULT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "REWARDS_VAULT",
      "REWARDS_VAULT():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  REWARD_TOKEN(): Address {
    let result = super.call("REWARD_TOKEN", "REWARD_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_REWARD_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("REWARD_TOKEN", "REWARD_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  STAKED_TOKEN(): Address {
    let result = super.call("STAKED_TOKEN", "STAKED_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_STAKED_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("STAKED_TOKEN", "STAKED_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  UNSTAKE_WINDOW(): BigInt {
    let result = super.call("UNSTAKE_WINDOW", "UNSTAKE_WINDOW():(uint256)", []);

    return result[0].toBigInt();
  }

  try_UNSTAKE_WINDOW(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "UNSTAKE_WINDOW",
      "UNSTAKE_WINDOW():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _aaveGovernance(): Address {
    let result = super.call(
      "_aaveGovernance",
      "_aaveGovernance():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try__aaveGovernance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_aaveGovernance",
      "_aaveGovernance():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _nonces(param0: Address): BigInt {
    let result = super.call("_nonces", "_nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try__nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_nonces", "_nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _votingSnapshots(
    param0: Address,
    param1: BigInt,
  ): StakedAaveToken___votingSnapshotsResult {
    let result = super.call(
      "_votingSnapshots",
      "_votingSnapshots(address,uint256):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return new StakedAaveToken___votingSnapshotsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try__votingSnapshots(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<StakedAaveToken___votingSnapshotsResult> {
    let result = super.tryCall(
      "_votingSnapshots",
      "_votingSnapshots(address,uint256):(uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakedAaveToken___votingSnapshotsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  _votingSnapshotsCounts(param0: Address): BigInt {
    let result = super.call(
      "_votingSnapshotsCounts",
      "_votingSnapshotsCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try__votingSnapshotsCounts(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_votingSnapshotsCounts",
      "_votingSnapshotsCounts(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  assets(param0: Address): StakedAaveToken__assetsResult {
    let result = super.call(
      "assets",
      "assets(address):(uint128,uint128,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new StakedAaveToken__assetsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_assets(
    param0: Address,
  ): ethereum.CallResult<StakedAaveToken__assetsResult> {
    let result = super.tryCall(
      "assets",
      "assets(address):(uint128,uint128,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakedAaveToken__assetsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getDelegateeByType(delegator: Address, delegationType: i32): Address {
    let result = super.call(
      "getDelegateeByType",
      "getDelegateeByType(address,uint8):(address)",
      [
        ethereum.Value.fromAddress(delegator),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType)),
      ],
    );

    return result[0].toAddress();
  }

  try_getDelegateeByType(
    delegator: Address,
    delegationType: i32,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getDelegateeByType",
      "getDelegateeByType(address,uint8):(address)",
      [
        ethereum.Value.fromAddress(delegator),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNextCooldownTimestamp(
    fromCooldownTimestamp: BigInt,
    amountToReceive: BigInt,
    toAddress: Address,
    toBalance: BigInt,
  ): BigInt {
    let result = super.call(
      "getNextCooldownTimestamp",
      "getNextCooldownTimestamp(uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(fromCooldownTimestamp),
        ethereum.Value.fromUnsignedBigInt(amountToReceive),
        ethereum.Value.fromAddress(toAddress),
        ethereum.Value.fromUnsignedBigInt(toBalance),
      ],
    );

    return result[0].toBigInt();
  }

  try_getNextCooldownTimestamp(
    fromCooldownTimestamp: BigInt,
    amountToReceive: BigInt,
    toAddress: Address,
    toBalance: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNextCooldownTimestamp",
      "getNextCooldownTimestamp(uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(fromCooldownTimestamp),
        ethereum.Value.fromUnsignedBigInt(amountToReceive),
        ethereum.Value.fromAddress(toAddress),
        ethereum.Value.fromUnsignedBigInt(toBalance),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPowerAtBlock(
    user: Address,
    blockNumber: BigInt,
    delegationType: i32,
  ): BigInt {
    let result = super.call(
      "getPowerAtBlock",
      "getPowerAtBlock(address,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType)),
      ],
    );

    return result[0].toBigInt();
  }

  try_getPowerAtBlock(
    user: Address,
    blockNumber: BigInt,
    delegationType: i32,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPowerAtBlock",
      "getPowerAtBlock(address,uint256,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(blockNumber),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPowerCurrent(user: Address, delegationType: i32): BigInt {
    let result = super.call(
      "getPowerCurrent",
      "getPowerCurrent(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType)),
      ],
    );

    return result[0].toBigInt();
  }

  try_getPowerCurrent(
    user: Address,
    delegationType: i32,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPowerCurrent",
      "getPowerCurrent(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(delegationType)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalRewardsBalance(staker: Address): BigInt {
    let result = super.call(
      "getTotalRewardsBalance",
      "getTotalRewardsBalance(address):(uint256)",
      [ethereum.Value.fromAddress(staker)],
    );

    return result[0].toBigInt();
  }

  try_getTotalRewardsBalance(staker: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalRewardsBalance",
      "getTotalRewardsBalance(address):(uint256)",
      [ethereum.Value.fromAddress(staker)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserAssetData(user: Address, asset: Address): BigInt {
    let result = super.call(
      "getUserAssetData",
      "getUserAssetData(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(asset)],
    );

    return result[0].toBigInt();
  }

  try_getUserAssetData(
    user: Address,
    asset: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserAssetData",
      "getUserAssetData(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(asset)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  stakerRewardsToClaim(param0: Address): BigInt {
    let result = super.call(
      "stakerRewardsToClaim",
      "stakerRewardsToClaim(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_stakerRewardsToClaim(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakerRewardsToClaim",
      "stakerRewardsToClaim(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakersCooldowns(param0: Address): BigInt {
    let result = super.call(
      "stakersCooldowns",
      "stakersCooldowns(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_stakersCooldowns(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakersCooldowns",
      "stakersCooldowns(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupplyAt(blockNumber: BigInt): BigInt {
    let result = super.call(
      "totalSupplyAt",
      "totalSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)],
    );

    return result[0].toBigInt();
  }

  try_totalSupplyAt(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupplyAt",
      "totalSupplyAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get stakedToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get cooldownSeconds(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get unstakeWindow(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get rewardsVault(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get emissionManager(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get distributionDuration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[7].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[8].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[9].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ConfigureAssetsCall extends ethereum.Call {
  get inputs(): ConfigureAssetsCall__Inputs {
    return new ConfigureAssetsCall__Inputs(this);
  }

  get outputs(): ConfigureAssetsCall__Outputs {
    return new ConfigureAssetsCall__Outputs(this);
  }
}

export class ConfigureAssetsCall__Inputs {
  _call: ConfigureAssetsCall;

  constructor(call: ConfigureAssetsCall) {
    this._call = call;
  }

  get assetsConfigInput(): Array<ConfigureAssetsCallAssetsConfigInputStruct> {
    return this._call.inputValues[0].value.toTupleArray<ConfigureAssetsCallAssetsConfigInputStruct>();
  }
}

export class ConfigureAssetsCall__Outputs {
  _call: ConfigureAssetsCall;

  constructor(call: ConfigureAssetsCall) {
    this._call = call;
  }
}

export class ConfigureAssetsCallAssetsConfigInputStruct extends ethereum.Tuple {
  get emissionPerSecond(): BigInt {
    return this[0].toBigInt();
  }

  get totalStaked(): BigInt {
    return this[1].toBigInt();
  }

  get underlyingAsset(): Address {
    return this[2].toAddress();
  }
}

export class CooldownCall extends ethereum.Call {
  get inputs(): CooldownCall__Inputs {
    return new CooldownCall__Inputs(this);
  }

  get outputs(): CooldownCall__Outputs {
    return new CooldownCall__Outputs(this);
  }
}

export class CooldownCall__Inputs {
  _call: CooldownCall;

  constructor(call: CooldownCall) {
    this._call = call;
  }
}

export class CooldownCall__Outputs {
  _call: CooldownCall;

  constructor(call: CooldownCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}

export class DelegateByTypeCall extends ethereum.Call {
  get inputs(): DelegateByTypeCall__Inputs {
    return new DelegateByTypeCall__Inputs(this);
  }

  get outputs(): DelegateByTypeCall__Outputs {
    return new DelegateByTypeCall__Outputs(this);
  }
}

export class DelegateByTypeCall__Inputs {
  _call: DelegateByTypeCall;

  constructor(call: DelegateByTypeCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delegationType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class DelegateByTypeCall__Outputs {
  _call: DelegateByTypeCall;

  constructor(call: DelegateByTypeCall) {
    this._call = call;
  }
}

export class DelegateByTypeBySigCall extends ethereum.Call {
  get inputs(): DelegateByTypeBySigCall__Inputs {
    return new DelegateByTypeBySigCall__Inputs(this);
  }

  get outputs(): DelegateByTypeBySigCall__Outputs {
    return new DelegateByTypeBySigCall__Outputs(this);
  }
}

export class DelegateByTypeBySigCall__Inputs {
  _call: DelegateByTypeBySigCall;

  constructor(call: DelegateByTypeBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get delegationType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class DelegateByTypeBySigCall__Outputs {
  _call: DelegateByTypeBySigCall;

  constructor(call: DelegateByTypeBySigCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get aaveMerkleDistributor(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
